{"version":3,"file":"swr-react-native.esm.js","sources":["../src/index.ts"],"sourcesContent":["import useSWR, { SWRResponse, SWRConfiguration, Key,   } from 'swr'\nimport { useRef, useEffect } from 'react'\nimport { AppState, Platform } from 'react-native'\nimport { useNavigation } from '@react-navigation/native'\nimport type NetInfo from '@react-native-community/netinfo'\nimport type { NetInfoState } from '@react-native-community/netinfo'\n\ntype Props<Data, Error> = {\n  /**\n   * Required: pass the `mutate` function returned to you by SWR.\n   */\n  mutate: SWRResponse<Data, Error>['mutate']\n} & Pick<\n  SWRConfiguration,\n  'revalidateOnFocus' | 'revalidateOnReconnect' | 'focusThrottleInterval'\n>\n\n/**\n * swr-react-native\n *\n * This helps you revalidate your SWR calls, based on navigation actions in `react-navigation`.\n */\nexport function useSWRNativeRevalidate<Data = any, Error = any>(\n  props: Props<Data, Error>\n) {\n  const {\n    mutate,\n    // copy defaults from SWR\n    revalidateOnFocus = true,\n    revalidateOnReconnect = true,\n    focusThrottleInterval = 5000,\n  } = props\n\n  const { addListener } = useNavigation()\n\n  const lastFocusedAt = useRef<number | null>(null)\n  const fetchRef = useRef(mutate)\n  useEffect(() => {\n    fetchRef.current = mutate\n  })\n  const focusCount = useRef(\n    Platform.select({\n      // react-navigation fire a focus event on the initial mount, but not on web\n      web: 1,\n      default: 0,\n    })\n  )\n\n  const previousAppState = useRef(AppState.currentState)\n  const previousNetworkState = useRef<NetInfoState | null>(null)\n\n  useEffect(() => {\n    let unsubscribeReconnect: ReturnType<\n      typeof NetInfo.addEventListener\n    > | null = null\n    if (revalidateOnReconnect && Platform.OS !== 'web') {\n      // inline require to avoid breaking SSR when window doesn't exist\n      const Network: typeof NetInfo = require('@react-native-community/netinfo')\n        .default\n      // SWR does all of this on web.\n      unsubscribeReconnect = Network.addEventListener((state) => {\n        if (\n          previousNetworkState.current?.isInternetReachable === false &&\n          state.isConnected &&\n          state.isInternetReachable\n        ) {\n          fetchRef.current()\n        }\n        previousNetworkState.current = state\n      })\n    }\n\n    const onFocus = () => {\n      if (focusCount.current < 1) {\n        focusCount.current++\n        return\n      }\n      const isThrottled =\n        focusThrottleInterval &&\n        lastFocusedAt.current &&\n        Date.now() - lastFocusedAt.current <= focusThrottleInterval\n\n      if (!isThrottled) {\n        lastFocusedAt.current = Date.now()\n        fetchRef.current()\n      }\n    }\n\n    const onAppStateChange = (nextAppState: AppState['currentState']) => {\n      if (\n        previousAppState.current.match(/inactive|background/) &&\n        nextAppState === 'active' &&\n        // swr handles this on web.\n        Platform.OS !== 'web'\n      ) {\n        onFocus()\n      }\n\n      previousAppState.current = nextAppState\n    }\n\n    let unsubscribeFocus: ReturnType<typeof addListener> | null = null\n\n    if (revalidateOnFocus) {\n      unsubscribeFocus = addListener('focus', onFocus)\n      AppState.addEventListener('change', onAppStateChange)\n    }\n\n    return () => {\n      if (revalidateOnFocus) {\n        unsubscribeFocus?.()\n        AppState.removeEventListener('change', onAppStateChange)\n      }\n      if (revalidateOnReconnect) {\n        unsubscribeReconnect?.()\n      }\n    }\n  }, [\n    addListener,\n    focusThrottleInterval,\n    revalidateOnFocus,\n    revalidateOnReconnect,\n  ])\n}\n\ntype Fetcher<Data> = ((...args: any) => Data | Promise<Data>) | null\n\n\nconst useSWRNative = <Data = any, Error = any>(\n  key: Key,\n  fn: Fetcher<Data> = null,\n  config?: SWRConfiguration<Data, Error>\n) => {\n  const swr = useSWR<Data, Error>(key, fn, config)\n\n  useSWRNativeRevalidate({\n    mutate: swr.mutate,\n    revalidateOnFocus: config?.revalidateOnFocus,\n    revalidateOnReconnect: config?.revalidateOnReconnect,\n    focusThrottleInterval: config?.focusThrottleInterval,\n  })\n\n  return swr\n}\n\nexport default useSWRNative"],"names":["useSWRNativeRevalidate","props","mutate","revalidateOnFocus","revalidateOnReconnect","focusThrottleInterval","useNavigation","addListener","lastFocusedAt","useRef","fetchRef","useEffect","current","focusCount","Platform","select","web","previousAppState","AppState","currentState","previousNetworkState","unsubscribeReconnect","OS","Network","require","addEventListener","state","isInternetReachable","isConnected","onFocus","isThrottled","Date","now","onAppStateChange","nextAppState","match","unsubscribeFocus","removeEventListener","useSWRNative","key","fn","config","swr","useSWR"],"mappings":";;;;;AAiBA;;;;;;SAKgBA,uBACdC;MAGEC,SAKED,MALFC;8BAKED,MAHFE;MAAAA,uDAAoB;8BAGlBF,MAFFG;MAAAA,2DAAwB;8BAEtBH,MADFI;MAAAA,2DAAwB;;uBAGFC,aAAa;MAA7BC,6BAAAA;;AAER,MAAMC,aAAa,GAAGC,MAAM,CAAgB,IAAhB,CAA5B;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAACP,MAAD,CAAvB;AACAS,EAAAA,SAAS,CAAC;AACRD,IAAAA,QAAQ,CAACE,OAAT,GAAmBV,MAAnB;AACD,GAFQ,CAAT;AAGA,MAAMW,UAAU,GAAGJ,MAAM,CACvBK,QAAQ,CAACC,MAAT,CAAgB;AACd;AACAC,IAAAA,GAAG,EAAE,CAFS;AAGd,eAAS;AAHK,GAAhB,CADuB,CAAzB;AAQA,MAAMC,gBAAgB,GAAGR,MAAM,CAACS,QAAQ,CAACC,YAAV,CAA/B;AACA,MAAMC,oBAAoB,GAAGX,MAAM,CAAsB,IAAtB,CAAnC;AAEAE,EAAAA,SAAS,CAAC;AACR,QAAIU,oBAAoB,GAEb,IAFX;;AAGA,QAAIjB,qBAAqB,IAAIU,QAAQ,CAACQ,EAAT,KAAgB,KAA7C,EAAoD;AAClD;AACA,UAAMC,OAAO,GAAmBC,OAAO,CAAC,iCAAD,CAAP,WAAhC,CAFkD;;;AAKlDH,MAAAA,oBAAoB,GAAGE,OAAO,CAACE,gBAAR,CAAyB,UAACC,KAAD;;;AAC9C,YACE,0BAAAN,oBAAoB,CAACR,OAArB,2CAA8Be,mBAA9B,MAAsD,KAAtD,IACAD,KAAK,CAACE,WADN,IAEAF,KAAK,CAACC,mBAHR,EAIE;AACAjB,UAAAA,QAAQ,CAACE,OAAT;AACD;;AACDQ,QAAAA,oBAAoB,CAACR,OAArB,GAA+Bc,KAA/B;AACD,OATsB,CAAvB;AAUD;;AAED,QAAMG,OAAO,GAAG,SAAVA,OAAU;AACd,UAAIhB,UAAU,CAACD,OAAX,GAAqB,CAAzB,EAA4B;AAC1BC,QAAAA,UAAU,CAACD,OAAX;AACA;AACD;;AACD,UAAMkB,WAAW,GACfzB,qBAAqB,IACrBG,aAAa,CAACI,OADd,IAEAmB,IAAI,CAACC,GAAL,KAAaxB,aAAa,CAACI,OAA3B,IAAsCP,qBAHxC;;AAKA,UAAI,CAACyB,WAAL,EAAkB;AAChBtB,QAAAA,aAAa,CAACI,OAAd,GAAwBmB,IAAI,CAACC,GAAL,EAAxB;AACAtB,QAAAA,QAAQ,CAACE,OAAT;AACD;AACF,KAdD;;AAgBA,QAAMqB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD;AACvB,UACEjB,gBAAgB,CAACL,OAAjB,CAAyBuB,KAAzB,CAA+B,qBAA/B,KACAD,YAAY,KAAK,QADjB;AAGApB,MAAAA,QAAQ,CAACQ,EAAT,KAAgB,KAJlB,EAKE;AACAO,QAAAA,OAAO;AACR;;AAEDZ,MAAAA,gBAAgB,CAACL,OAAjB,GAA2BsB,YAA3B;AACD,KAXD;;AAaA,QAAIE,gBAAgB,GAA0C,IAA9D;;AAEA,QAAIjC,iBAAJ,EAAuB;AACrBiC,MAAAA,gBAAgB,GAAG7B,WAAW,CAAC,OAAD,EAAUsB,OAAV,CAA9B;AACAX,MAAAA,QAAQ,CAACO,gBAAT,CAA0B,QAA1B,EAAoCQ,gBAApC;AACD;;AAED,WAAO;AACL,UAAI9B,iBAAJ,EAAuB;AACrBiC,QAAAA,gBAAgB,QAAhB,YAAAA,gBAAgB;AAChBlB,QAAAA,QAAQ,CAACmB,mBAAT,CAA6B,QAA7B,EAAuCJ,gBAAvC;AACD;;AACD,UAAI7B,qBAAJ,EAA2B;AACzBiB,QAAAA,oBAAoB,QAApB,YAAAA,oBAAoB;AACrB;AACF,KARD;AASD,GAlEQ,EAkEN,CACDd,WADC,EAEDF,qBAFC,EAGDF,iBAHC,EAIDC,qBAJC,CAlEM,CAAT;AAwED;;AAKD,IAAMkC,YAAY,GAAG,SAAfA,YAAe,CACnBC,GADmB,EAEnBC,EAFmB,EAGnBC,MAHmB;MAEnBD;AAAAA,IAAAA,KAAoB;;;AAGpB,MAAME,GAAG,GAAGC,MAAM,CAAcJ,GAAd,EAAmBC,EAAnB,EAAuBC,MAAvB,CAAlB;AAEAzC,EAAAA,sBAAsB,CAAC;AACrBE,IAAAA,MAAM,EAAEwC,GAAG,CAACxC,MADS;AAErBC,IAAAA,iBAAiB,EAAEsC,MAAF,oBAAEA,MAAM,CAAEtC,iBAFN;AAGrBC,IAAAA,qBAAqB,EAAEqC,MAAF,oBAAEA,MAAM,CAAErC,qBAHV;AAIrBC,IAAAA,qBAAqB,EAAEoC,MAAF,oBAAEA,MAAM,CAAEpC;AAJV,GAAD,CAAtB;AAOA,SAAOqC,GAAP;AACD,CAfD;;;;;"}