{"code":"import useSWR from 'swr';\r\nimport { useRef, useEffect } from 'react';\r\nimport { AppState, Platform } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n/**\r\n * swr-react-native\r\n *\r\n * This helps you revalidate your SWR calls, based on navigation actions in `react-navigation`.\r\n */\r\nexport function useSWRNativeRevalidate(props) {\r\n    const { mutate, \r\n    // copy defaults from SWR\r\n    revalidateOnFocus = true, revalidateOnReconnect = true, focusThrottleInterval = 5000, } = props;\r\n    const { addListener } = useNavigation();\r\n    const lastFocusedAt = useRef(null);\r\n    const fetchRef = useRef(mutate);\r\n    useEffect(() => {\r\n        fetchRef.current = mutate;\r\n    });\r\n    const focusCount = useRef(Platform.select({\r\n        // react-navigation fire a focus event on the initial mount, but not on web\r\n        web: 1,\r\n        default: 0,\r\n    }));\r\n    const previousAppState = useRef(AppState.currentState);\r\n    const previousNetworkState = useRef(null);\r\n    useEffect(() => {\r\n        let unsubscribeReconnect = null;\r\n        if (revalidateOnReconnect && Platform.OS !== 'web') {\r\n            // inline require to avoid breaking SSR when window doesn't exist\r\n            const Network = require('@react-native-community/netinfo')\r\n                .default;\r\n            // SWR does all of this on web.\r\n            unsubscribeReconnect = Network.addEventListener((state) => {\r\n                if (previousNetworkState.current?.isInternetReachable === false &&\r\n                    state.isConnected &&\r\n                    state.isInternetReachable) {\r\n                    fetchRef.current();\r\n                }\r\n                previousNetworkState.current = state;\r\n            });\r\n        }\r\n        const onFocus = () => {\r\n            if (focusCount.current < 1) {\r\n                focusCount.current++;\r\n                return;\r\n            }\r\n            const isThrottled = focusThrottleInterval &&\r\n                lastFocusedAt.current &&\r\n                Date.now() - lastFocusedAt.current <= focusThrottleInterval;\r\n            if (!isThrottled) {\r\n                lastFocusedAt.current = Date.now();\r\n                fetchRef.current();\r\n            }\r\n        };\r\n        const onAppStateChange = (nextAppState) => {\r\n            if (previousAppState.current.match(/inactive|background/) &&\r\n                nextAppState === 'active' &&\r\n                // swr handles this on web.\r\n                Platform.OS !== 'web') {\r\n                onFocus();\r\n            }\r\n            previousAppState.current = nextAppState;\r\n        };\r\n        let unsubscribeFocus = null;\r\n        if (revalidateOnFocus) {\r\n            unsubscribeFocus = addListener('focus', onFocus);\r\n            AppState.addEventListener('change', onAppStateChange);\r\n        }\r\n        return () => {\r\n            if (revalidateOnFocus) {\r\n                unsubscribeFocus?.();\r\n                AppState.removeEventListener('change', onAppStateChange);\r\n            }\r\n            if (revalidateOnReconnect) {\r\n                unsubscribeReconnect?.();\r\n            }\r\n        };\r\n    }, [\r\n        addListener,\r\n        focusThrottleInterval,\r\n        revalidateOnFocus,\r\n        revalidateOnReconnect,\r\n    ]);\r\n}\r\nconst useSWRNative = (key, fn = null, config) => {\r\n    const swr = useSWR(key, fn, config);\r\n    useSWRNativeRevalidate({\r\n        mutate: swr.mutate,\r\n        revalidateOnFocus: config?.revalidateOnFocus,\r\n        revalidateOnReconnect: config?.revalidateOnReconnect,\r\n        focusThrottleInterval: config?.focusThrottleInterval,\r\n    });\r\n    return swr;\r\n};\r\nexport default useSWRNative;\r\n//# sourceMappingURL=index.js.map","references":["/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/swr/dist/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@types/react/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@types/react-native/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@react-navigation/native/lib/typescript/src/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@react-native-community/netinfo/lib/typescript/src/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@react-native-community/netinfo/lib/typescript/src/index.d.ts","/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/node_modules/@react-native-community/netinfo/lib/typescript/src/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/vickysingh/Documents/React-Native-Demo/SWR-React-Native-Demo/index.d.ts","writeByteOrderMark":false,"text":"import { SWRResponse, SWRConfiguration, Key } from 'swr';\r\ndeclare type Props<Data, Error> = {\r\n    /**\r\n     * Required: pass the `mutate` function returned to you by SWR.\r\n     */\r\n    mutate: SWRResponse<Data, Error>['mutate'];\r\n} & Pick<SWRConfiguration, 'revalidateOnFocus' | 'revalidateOnReconnect' | 'focusThrottleInterval'>;\r\n/**\r\n * swr-react-native\r\n *\r\n * This helps you revalidate your SWR calls, based on navigation actions in `react-navigation`.\r\n */\r\nexport declare function useSWRNativeRevalidate<Data = any, Error = any>(props: Props<Data, Error>): void;\r\ndeclare type Fetcher<Data> = ((...args: any) => Data | Promise<Data>) | null;\r\ndeclare const useSWRNative: <Data = any, Error_1 = any>(key: Key, fn?: Fetcher<Data>, config?: Partial<import(\"swr/dist/types\").PublicConfiguration<Data, Error_1, Key>> | undefined) => SWRResponse<Data, Error_1>;\r\nexport default useSWRNative;\r\n"}}
